--- USER PROMPT ---
GENERATE THE FOLLOWING FOUR ARTIFACTS based on the analysis:

1. **Frida Script**: A JavaScript script for Frida to hook the sink method `<jakhar.aseem.diva.AccessControl3Activity: void addPin(android.view.View)>`.
   - Detect vulnerability confirmation (e.g., exception, specific condition).
   - On confirmation, print the exact log format:
     `[FRIDA_VULN_CONFIRMED] finding_finding_3 | Strategy: VerifySharedPrefWrite | Detail: <specific details>`
   - Include dynamic info (e.g., exception message) in detail.
   - Example: `console.log("[FRIDA_VULN_CONFIRMED] finding_finding_3 | Strategy: VerifySharedPrefWrite | Detail: Exception caught: " + error.message);`
   - Print ONLY on confirmation.
2. **ADB Command**: Start the target activity `jakhar.aseem.diva.AccessControl3Activity` using `adb shell am start -n`.
3. **Fuzzing Hints**: Key-value pairs.
   ```text
# Fuzzing hints for Finding: finding_3
FUZZER_TYPE_HINT: [SQLi|File|Log|Basic]
TARGET_ELEMENT_IDS: [] # <--- Fill EXCLUSIVELY from 'Parsed Interactive Elements' JSON
TARGET_ELEMENT_TYPES: [] # <--- Fill EXCLUSIVELY from 'Parsed Interactive Elements' JSON
TARGET_ELEMENT_HINTS: [] # <--- Fill EXCLUSIVELY from 'Parsed Interactive Elements' JSON
PAYLOAD_KEYWORDS: []
INPUT_FORMAT: [free_text]
```
4. **Fuzzer Config JSON**: JSON for the fuzzer.
   **ULTRA-CRITICAL:** Generate `interactionPoints` using **ONLY** the **`id` values** found in the **`Parsed Interactive Elements from Layout XML` JSON** provided above. **DO NOT GUESS IDs** or use IDs from raw XML snippets. Verify the button ID is correct.
   - If multiple layouts were given, choose the most relevant one first.
   - Construct `target` -> `value` as `jakhar.aseem.diva:id/<id_from_chosen_parsed_json>`.
   - Determine sequence (input then click).
   - Populate other fields.

OUTPUT FORMAT:
Use these delimiters and structure EXACTLY:

=== START FRIDA SCRIPT ===
```javascript
// Frida script for finding_3
setImmediate(function() {{
    Java.perform(function() {{
        console.log('[*] Starting Frida script for finding_3...');
        try {{
             const targetClass = Java.use('jakhar.aseem.diva.AccessControl3Activity');
             const targetMethod = targetClass.addPin;
             targetMethod.implementation = function(/* args */) {{
                  console.log('[*] <jakhar.aseem.diva.AccessControl3Activity: void addPin(android.view.View)> Hooked!');
                  try {{
                      var result = targetMethod.apply(this, arguments);
                      return result;
                  }} catch (e) {{
                      console.log('[FRIDA_VULN_CONFIRMED] finding_finding_3 | Strategy: VerifySharedPrefWrite | Detail: Exception caught: ' + e.message);
                      throw e;
                  }}
             }};
        }} catch(err) {{ console.error('[!] Error hooking <jakhar.aseem.diva.AccessControl3Activity: void addPin(android.view.View)>: ' + err.message); }}
        console.log('[*] Frida hooks installed.');
    }});
}});
```
=== END FRIDA SCRIPT ===

=== START ADB COMMAND ===
```text
# Command for finding finding_3
adb shell am start -n jakhar.aseem.diva/jakhar.aseem.diva.AccessControl3Activity
```
=== END ADB COMMAND ===

=== START FUZZING HINTS ===
```text
# Hints for finding_3
FUZZER_TYPE_HINT: [basic]
TARGET_ELEMENT_IDS: []
TARGET_ELEMENT_TYPES: []
TARGET_ELEMENT_HINTS: []
PAYLOAD_KEYWORDS: []
INPUT_FORMAT: [free_text]
```
=== END FUZZING HINTS ===

=== START FUZZER CONFIG JSON ===
```json
{{
    "targetPackage": "jakhar.aseem.diva",
    "fridaScript": "finding_3_script.js",
    "dynamicStrategy": "VerifySharedPrefWrite",
    "fuzzIterations": 50,
    "resetAction": "restart_app",
    "fuzzerType": "basic",
    "targetActivity": "jakhar.aseem.diva.AccessControl3Activity",
    "iterationDelay": 0.5,
    "postInteractionWait": 1.5,
    "postFridaLaunchWait": 4.0,
    "interactionPoints": [
        // CRITICAL: Use ONLY the 'id's from the 'Parsed Interactive Elements' JSON above.
        // Example: {"action": "input", "target": {"type": "id", "value": "jakhar.aseem.diva:id/userName"}, "source": "fuzz_input_1"},
        // Example: {"action": "click", "target": {"type": "id", "value": "jakhar.aseem.diva:id/submitButton"}}
        {{"action": "input", "target": {{"type": "id", "value": "jakhar.aseem.diva:id/<USE_PARSED_ID_1>"}}, "source": "fuzz_input_1"}},
        {{"action": "click", "target": {{"type": "id", "value": "jakhar.aseem.diva:id/<USE_CORRECT_PARSED_BUTTON_ID>"}}}}
    ]
}}
```
=== END FUZZER CONFIG JSON ===

Examples:
Input: ?
Output: ?
Input: ?
Output: ?
Input: ?
Output: ?
Input: ?
Output: ?
Input: ?
Output: ?
Input: ?
Output: ?

ANALYZE THE FOLLOWING AND GENERATE THE FOUR ARTIFACTS:

Finding ID: finding_3
Dynamic Strategy: VerifySharedPrefWrite
Sink Method (Target): <jakhar.aseem.diva.AccessControl3Activity: void addPin(android.view.View)>
Package Name: jakhar.aseem.diva
Likely Activity Class: jakhar.aseem.diva.AccessControl3Activity
Relevant Code Snippet:
```java
public void addPin(View view) {
SharedPreferences spref = PreferenceManager.getDefaultSharedPreferences(this);
        SharedPreferences.Editor spedit = spref.edit();
        EditText pinTxt = (EditText) findViewById(R.id.aci3Pin);
        String pin = pinTxt.getText().toString();
        if (pin == null || pin.isEmpty()) {
            Toast.makeText(this, "Please Enter a valid pin!", 0).show();
            return;
        }
        Button vbutton = (Button) findViewById(R.id.aci3viewbutton);
        spedit.putString(getString(R.string.pkey), pin);
        spedit.commit();
        if (vbutton.getVisibility() != 0) {
            vbutton.setVisibility(0);
        }
        Toast.makeText(this, "PIN Created successfully. Private notes are now protected with PIN", 0).show();
}
```
AndroidManifest.xml (Partial):
```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    android:versionCode="1"
    android:versionName="1.0"
    package="jakhar.aseem.diva"
    platformBuildVersionCode="23"
    platformBuildVersionName="6.0-2166767">
    <uses-sdk
        android:minSdkVersion="15"
        android:targetSdkVersion="23"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.R...
```
**Layout XML Information:** Single High-Confidence Match Found
**Layout XML (High Confidence Match):**
```xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <TextView
        android:textColor="@color/material_grey_600"
        android:gravity="fill"
        android:id="@+id/aci31textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/aci3_intro"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"/>
    <EditText
        android:id="@+id/aci3Pin"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="@string/aci3_enterpin"
        android:ems="10"
        android:maxLength="4"
        android:layout_alignParentLeft="true"
        android:layout_centerVertical="true"
        android:inputType="numberPassword"/>
    <Button
        android:id="@+id/aci3createpinbutton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/aci3_createpin"
        android:layout_below="@+id/aci3Pin"
        android:layout_centerHorizontal="true"
        android:onClick="addPin"/>
    <Button
        android:id="@+id/aci3viewbutton"
        android:visibility="invisible"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/aci3_gotonotes"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:onClick="goToNotes"/>
</RelativeLayout>

```

**Parsed Interactive Elements from Layout XML:**
**Status:** Successfully Parsed (Single)
```json
[
  {
    "type": "TextView",
    "id": "aci31textView",
    "text": "@string/aci3_intro"
  },
  {
    "type": "EditText",
    "id": "aci3Pin",
    "hint": "@string/aci3_enterpin"
  },
  {
    "type": "Button",
    "id": "aci3createpinbutton",
    "text": "@string/aci3_createpin"
  },
  {
    "type": "Button",
    "id": "aci3viewbutton",
    "text": "@string/aci3_gotonotes"
  }
]
```

**NOTE ON USING LAYOUT INFO FOR FUZZER CONFIG:**
- If a **Single High-Confidence Layout** was found, use the element `id`s from its corresponding JSON.
- Format the interaction point target ID as `jakhar.aseem.diva:id/<element_id_from_chosen_parsed_json>`.
- **Crucially, ensure the final Button click uses the correct ID from the chosen parsed JSON, even if it appears later in the JSON list.**
